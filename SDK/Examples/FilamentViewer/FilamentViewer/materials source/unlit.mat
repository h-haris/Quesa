material {
	name : unlit,
	shadingModel : unlit,
	postLightingBlending : add,
    doubleSided : false,
    requires : [
        uv0
    ],
	parameters : [
        {
            type : bool,
            name : isTextured
        },
		{
            type : sampler2d,
            name : texture
		},
		{
			type : float3x3,
			name : uvtrans
		},
		{
			type : float2,
			name : depthRange
		},
		{
            type : float3,
            name : baseColor
        },
		{
			type : float3,
			name : emissive
		}
	]
}


vertex {
	void materialVertex(inout MaterialVertexInputs material)
	{
		// No idea why I must do this song and dance to get UV transforms
		// to work correctly.  It may have something to do with the V flipping
		// that Filament normally does, but if I turn off flipUV, the results
		// are worse.
		material.uv0.y = 1.0 - material.uv0.y;
		float3 uvhom = materialParams.uvtrans * float3( material.uv0, 1.0 );
		material.uv0 = uvhom.xy;
		material.uv0.y = 1.0 - material.uv0.y;
		
		// glDepthRange emulation
		material.clipSpaceTransform[3][2] = materialParams.depthRange.x +
			materialParams.depthRange.y -1.0;
		material.clipSpaceTransform[2][2] = materialParams.depthRange.y -
			materialParams.depthRange.x;
	}
}

fragment {
	void material(inout MaterialInputs material) {
		prepareMaterial(material);
		material.baseColor.rgb = materialParams.isTextured?
			texture(materialParams_texture, getUV0()).rgb :
			materialParams.baseColor;
		material.baseColor.a = 1.0;
		material.postLightingColor.rgb = materialParams.emissive;
		material.postLightingColor.a = 0.0;
	}
}
